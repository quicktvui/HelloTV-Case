plugins {
    id 'com.android.application'
}

ext {
    APP_PACKAGE = 'com.quicktvui.hellotv'   // APK包名
    APP_NAME = 'HelloTV'                    // APK名字(Launcher显示)
    APP_VERSION_CODE = 1                    // APK版本code
    APP_VERSION_NAME = '1.0.0'              // APK版本名称

    BUILD_RPK_IN_APK = true                 // 是否将rpk打入apk(非assets加载方式不用打包进apk)
    RPK_PACKAGE = "es.hellotv"              // 生成的rpk包名
    RPK_FILE_NAME = "hello.rpk"             // 生成的rpk文件名


    vueDistDir = new File(project.rootDir, '../dist/android')
    assetsDir = new File(project.buildDir, 'assets')
}

android {
    namespace 'com.quicktvui.hellotv'
    compileSdk sdk_compileSdk

    defaultConfig {
        applicationId APP_PACKAGE
        minSdk sdk_minSdk
        targetSdk sdk_targetSdk
        versionCode APP_VERSION_CODE
        versionName APP_VERSION_NAME

        resValue "string", "app_name", APP_NAME

        multiDexEnabled true

        buildConfigField 'String', 'RPK_PACKAGE', "\"${RPK_PACKAGE}\""
        buildConfigField 'String', 'RPK_FILE_NAME', "\"assets://${RPK_FILE_NAME}\""

        buildConfigField 'boolean', 'IS_BUILD_RPK_IN_APK', "$BUILD_RPK_IN_APK"

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${APP_NAME}_${defaultConfig.versionName}_${releaseTime()}_${buildType.name}.apk"
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // 此处替换自己签名
            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    android.sourceSets.findByName('main').assets.srcDirs += assetsDir

}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.0.0'

    implementation 'com.extscreen.runtime:official:2.8.0'
}

task deleteRpkCacheTask(type: Delete) {
    delete vueDistDir
    delete assetsDir
}

import org.apache.tools.ant.taskdefs.condition.Os

task buildVendor(type: Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        executable 'cmd'
        args '/c', 'npm', 'run', 'vendor'
    } else {
        executable 'npm'
        args 'run', 'vendor'
    }
}

task buildVue(type: Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        executable 'cmd'
        args '/c', 'npm', 'run', 'build'
    } else {
        executable 'npm'
        args 'run', 'build'
    }
    dependsOn(buildVendor)
}

task zipRpkTask(type: Zip) {
    archiveName = RPK_FILE_NAME
    destinationDir = assetsDir
    from vueDistDir

    dependsOn(buildVue)
}

afterEvaluate {

    tasks.findByName('preBuild').dependsOn(deleteRpkCacheTask)

    if(BUILD_RPK_IN_APK){
        ['generateDebugAssets', 'generateReleaseAssets'].each {
            tasks.findByName(it).dependsOn(zipRpkTask)
        }
    }

}
